#!/bin/bash

for var in {0..500}
do
    if((var%7==0))
    then 
    echo $var
    else
    continue
    fi
done


for var in {0..500} : for循环包括0 和 500,会依次取到 0 1 2  .. 500
do
    if((var%7==0))      (( )) 用来进行算数运算和条件测试
    then
    echo $var         打印变量

shell 中的特殊符号
$ : $用于引用变量的值,在shell中,变量前面加上$，可以获取该变量的值
    name="Alice"
    echo $name  # 输出 Alice

$? : 是一个特殊变量用于获取上一个命令的退出状态码,通常为整数,其中若为0 则表示成功,非0表示错误

$$ : 表示当前shell的进程id
    echo $$  # 输出当前Shell的进程ID

$# : 用于获取传递给脚本的函数或参数个数
    ./myscript.sh arg1 arg2 arg3
    echo $#  # 输出 3

$@ : 用于引用脚本或函传递的所有参数(作为字符串数组)。 如果用双引号括起来，所有参数将作为独立的字符串处理
    echo "$@"  # 输出所有传递的参数，参数间有空格

$* : 所有位置的参数(作为一个单一的字符串),与$@类似，但他将所有参数连成一个单一的字符串      
    echo "$*"  # 输出所有传递的参数，作为一个单独的字符串  如果传递了 arg1 arg2 arg3，$* 会将它们作为一个字符串输出（例如 "arg1 arg2 arg3"）。

$() : 用来做命令替换，执行括号中的命令，并将输出结果作为返回值。例如，可以将某个命令的输出赋值给一个变量，或者作为另一个命令的参数。
    current_time=$(date)
    echo $current_time  # 输出当前日期和时间

& : 后台执行,使得命令在后台执行不会阻塞当前终端
    sleep 10 &  # 睡眠10秒，但不阻塞终端
